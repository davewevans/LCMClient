@page "/createNewUser"

@using LCMClient.Features.Auth
@using LCMClient.Features.Admin.Models
@using LCMClient.Features.Shared.Repository.Contracts

@inject IAccountsRepository accountsRepository
@inject IUserRepository userRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IJSRuntime jsRuntime
@inject IMatToaster Toaster

@attribute [Authorize(Roles = "Admin")]


<div class="mb-16">
    <EditForm Model="userInfo" OnValidSubmit="CreateNewUserHandler">
        <DataAnnotationsValidator />


        <MudCard Class="my-mud-card-form">
            <MudCardHeader Style="background-color:lightskyblue;">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Create New User</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Cancel" Color="Color.Default" OnClick="@OnCancel" />
                </CardHeaderActions>
            </MudCardHeader>

            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.FirstName" Label="First Name" Variant="Variant.Text" />
                        <ValidationMessage For="@(() => userInfo.FirstName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.LastName" Label="Last Name" Variant="Variant.Text" />
                        <ValidationMessage For="@(() => userInfo.LastName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.Email" Label="Email" Variant="Variant.Text" />
                        <ValidationMessage For="@(() => userInfo.Email)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.Password" Label="Password" Variant="Variant.Text" />
                        <ValidationMessage For="@(() => userInfo.Password)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.ConfirmPassword" Label="Confirm Password" Variant="Variant.Text" />
                        <ValidationMessage For="@(() => userInfo.ConfirmPassword)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect T="string" Label="Assign Role" @bind-Value="@userInfo.Role">

                            @foreach (var role in roles)
                            {
                                <MudSelectItem Value="@role">@role</MudSelectItem>
                            }

                        </MudSelect>
                        <ValidationMessage For="@(() => userInfo.Role)" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>


            <MudCardActions>
                <MudButton Variant="Variant.Filled"
                           ButtonType="ButtonType.Submit"
                           Size="Size.Large"
                           Color="Color.Primary"
                           Style="margin-left:auto;margin-right:auto;"
                           Class="mt-6">
                    Create App User
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>


@code {
    private UserCreationModel userInfo = new UserCreationModel();
    private List<string> roles = new List<string>();

    private string response = "";

    protected override async Task OnInitializedAsync()
    {
        var payload = await userRepository.GetRoles();
        this.roles = payload.Select(x => x.RoleName).ToList();
    }

    private async Task CreateNewUserHandler()
    {
        var response = await accountsRepository.Register(userInfo);

        if (response.IsSuccessful)
        {
            ShowToast(MatToastType.Success, message: "New user created!");
            navigationManager.NavigateTo("/admin");
        }
        else
        {
            ShowToast(MatToastType.Danger, message: "User was not created. Something went wrong.");
        }

    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("/admin");
    }

    public void ShowToast(MatToastType type, string icon = "", string title = "", string message = "")
    {
        Toaster.Add(message, type, title, icon, config =>
        {
            config.ShowProgressBar = false;
            config.RequireInteraction = false;
        });
    }


    private void Toast()
    {
        ShowToast(MatToastType.Success, message: "New user created!");
    }
}
