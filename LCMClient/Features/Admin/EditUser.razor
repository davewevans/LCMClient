@page "/editUser/{userId}"

@using LCMClient.Features.Auth
@using LCMClient.Features.Admin.Models
@using LCMClient.Features.Shared.Repository.Contracts

@inject IAccountsRepository accountsRepository
@inject IUserRepository userRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = "Admin")]

<div class="mb-16 m-8">
    <EditForm Model="userInfo" OnValidSubmit="EditUserHandler">
        <DataAnnotationsValidator/>

        <MudCard Class="my-mud-card-form">
            <MudCardHeader Class="my-mud-card-header">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Edit User</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Cancel" Color="Color.Default" OnClick="@OnCancel"/>
                </CardHeaderActions>
            </MudCardHeader>

            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.FirstName" Label="First Name" Variant="Variant.Text"/>
                        <ValidationMessage For="@(() => userInfo.FirstName)"/>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.LastName" Label="Last Name" Variant="Variant.Text"/>
                        <ValidationMessage For="@(() => userInfo.LastName)"/>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.Email" Label="Email" Variant="Variant.Text"/>
                        <ValidationMessage For="@(() => userInfo.Email)"/>
                    </MudItem>

                    <MudItem xs="12">
                        <h3>Assign Role(s)</h3>
                        <MudCheckBox @bind-Checked="isInAdminRole">@adminRole.DisplayName</MudCheckBox>
                        <div class="mb-6 bg-blue-100 p-2">
                            @adminRole.RoleDescription
                        </div>
                        <MudCheckBox @bind-Checked="isInStaffRole">@staffRole.DisplayName</MudCheckBox>
                        <div class="mb-6 bg-blue-100 p-2">
                            @staffRole.RoleDescription
                        </div>
                        <MudCheckBox @bind-Checked="isInGuestRole">@guestRole.DisplayName</MudCheckBox>
                        <div class="mb-6 bg-blue-100 p-2">
                            @guestRole.RoleDescription
                        </div>
                        <MudCheckBox @bind-Checked="isInNarrationApproverRole">@narrationApproverRole.DisplayName</MudCheckBox>
                        <div class="mb-6 bg-blue-100 p-2">
                            @narrationApproverRole.RoleDescription
                        </div>
                        <MudCheckBox @bind-Checked="isInOrphanReadWriteRole">@orphanReadWriteRole.DisplayName</MudCheckBox>
                        <div class="mb-6 bg-blue-100 p-2">
                            @orphanReadWriteRole.RoleDescription
                        </div>
                        <MudCheckBox @bind-Checked="isInGuardianReadWriteRole">@guardianReadWriteRole.DisplayName</MudCheckBox>
                        <div class="mb-6 bg-blue-100 p-2">
                            @guardianReadWriteRole.RoleDescription
                        </div>
                        <MudCheckBox @bind-Checked="isInSponsorReadWriteRole">@sponsorReadWriteRole.DisplayName</MudCheckBox>
                        <div class="mb-6 bg-blue-100 p-2">
                            @sponsorReadWriteRole.RoleDescription
                        </div>

                        @if (noRoleSelected)
                        {
                            <div class="text-red-800 mt-4">
                                @roleValidationMessage
                            </div>
                        }

                    </MudItem>
                </MudGrid>
            </MudCardContent>


            <MudCardActions>
                <MudButton Variant="Variant.Filled"
                           ButtonType="ButtonType.Submit"
                           Size="Size.Large"
                           Color="Color.Primary"
                           Style="margin-left:auto;margin-right:auto;"
                           Class="mt-6">
                    Edit User
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>


@code {

    [Parameter]
    public string UserId { get; set; }

    bool noRoleSelected = false;
    string roleValidationMessage = "Please assign at least one role.";

    private bool isInAdminRole = false;
    private bool isInStaffRole = false;
    private bool isInGuestRole = false;
    private bool isInNarrationApproverRole = false;
    private bool isInOrphanReadWriteRole = false;
    private bool isInGuardianReadWriteRole = false;
    private bool isInSponsorReadWriteRole = false;

    private RoleModel adminRole = new();
    private RoleModel staffRole = new();
    private RoleModel guestRole = new();
    private RoleModel narrationApproverRole = new();
    private RoleModel orphanReadWriteRole = new();
    private RoleModel guardianReadWriteRole = new();
    private RoleModel sponsorReadWriteRole = new();

    private UserEditModel userInfo = new UserEditModel();
    private UserModel user = new UserModel();
    private List<RoleModel> roles = new();

    protected override async Task OnInitializedAsync()
    {
        user = await userRepository.GetUserById(UserId);

        userInfo.FirstName = user.FirstName;
        userInfo.LastName = user.LastName;
        userInfo.Email = user.Email;
        userInfo.Roles = user.Roles;

        roles = await userRepository.GetRoles();
        SetUserRoleBools();
        SetRoleFields();
    }

    private void SetUserRoleBools()
    {
        foreach (var role in userInfo.Roles)
        {
            switch (role.RoleName)
            {
                case "Admin":
                    isInAdminRole = true;
                    break;
                case "Staff":
                    isInStaffRole = true;
                    break;
                case "Guest":
                    isInGuestRole = true;
                    break;
                case "NarrationApprover":
                    isInNarrationApproverRole = true;
                    break;
                case "OrphanReadWrite":
                    isInOrphanReadWriteRole = true;
                    break;
                case "GuardianReadWrite":
                    isInGuardianReadWriteRole = true;
                    break;
                case "SponsorReadWrite":
                    isInSponsorReadWriteRole = true;
                    break;              
            }
        }
    }

    private void SetRoleFields()
    {
        if (roles == null) return;
        adminRole = roles.FirstOrDefault(x => x.RoleName.Equals(RoleModel.AdminRole));
        staffRole = roles.FirstOrDefault(x => x.RoleName.Equals(RoleModel.StaffRole));
        guestRole = roles.FirstOrDefault(x => x.RoleName.Equals(RoleModel.GuestRole));
        narrationApproverRole = roles.FirstOrDefault(x => x.RoleName.Equals(RoleModel.NarrationApproverRole));
        orphanReadWriteRole = roles.FirstOrDefault(x => x.RoleName.Equals(RoleModel.OrphanReadWriteRole));
        guardianReadWriteRole = roles.FirstOrDefault(x => x.RoleName.Equals(RoleModel.GuardianReadWriteRole));
        sponsorReadWriteRole = roles.FirstOrDefault(x => x.RoleName.Equals(RoleModel.SponsorReadWriteRole));
    }

    private async Task EditUserHandler()
    {
        userInfo.Roles.Clear();
        if (isInAdminRole) userInfo.Roles.Add(new RoleModel {RoleName = RoleModel.AdminRole});
        if (isInStaffRole) userInfo.Roles.Add(new RoleModel {RoleName = RoleModel.StaffRole});
        if (isInGuestRole) userInfo.Roles.Add(new RoleModel {RoleName = RoleModel.GuestRole});
        if (isInNarrationApproverRole) userInfo.Roles.Add(new RoleModel {RoleName = RoleModel.NarrationApproverRole});
        if (isInOrphanReadWriteRole) userInfo.Roles.Add(new RoleModel {RoleName = RoleModel.OrphanReadWriteRole});
        if (isInGuardianReadWriteRole) userInfo.Roles.Add(new RoleModel {RoleName = RoleModel.GuardianReadWriteRole});
        if (isInSponsorReadWriteRole) userInfo.Roles.Add(new RoleModel {RoleName = RoleModel.SponsorReadWriteRole});

        if (userInfo.Roles.Count < 1)
        {
            noRoleSelected = true;
            return;
        }

        await userRepository.EditUser(UserId, userInfo);
        navigationManager.NavigateTo("/admin");
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("/admin");
    }

}