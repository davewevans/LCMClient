@using LCMClient.Features.Auth
@using LCMClient.Features.Shared
@using LCMClient.Helpers
@using LCMClient.Features.Shared.Repository.Contracts
@using LCMClient.Features.Shared.Models
@using LCMClient.Features.Admin.Models

@inject IAccountsRepository accountsRepository
@inject IUserRepository userRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IJSRuntime jsRuntime
@inject IDialogService Dialog
@inject IMatToaster Toaster

@attribute [Authorize(Roles = "Admin")]

@if (isLoading)
{
    <div class="flex justify-center align-content-center h-full">
            <MudProgressCircular Color="Color.Primary"
                                 Indeterminate="@isLoading" />
        </div>
}


@if (users != null && users.Response != null && users?.Response?.Count != 0 && !isLoading)
{
    <MudSimpleTable>
        <thead>
            <tr>
                <th><span class="font-semibold">First Name</span></th>
                <th><span class="font-semibold">Last Name</span></th>
                <th><span class="font-semibold">Email Name</span></th>
                <th><span class="font-semibold">Role</span></th>
                <th>
                    <div class="flex justify-center">
                        <span class="font-semibold">
                            Reset Password
                        </span>
                    </div>
                </th>
                <th>
                    <div class="flex justify-center">
                        <span class="font-semibold">
                            Edit
                        </span>
                    </div>
                </th>
                <th>
                    <div class="flex justify-center">
                        <span class="font-semibold">
                            Delete
                        </span>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users.Response)
            {
                <tr>
                    <td>
                        <span class="font-normal">@user.FirstName</span>
                    </td>
                    <td>
                        <span class="font-normal">@user.LastName</span>
                    </td>
                    <td>
                        <span class="font-normal">@user.Email</span>
                    </td>
                    <td>
                        <span class="font-normal">@user.Role</span>
                    </td>
                    <td>
                        <div class="flex justify-center">
                            <MudButton Class="mt-2" @onclick="() => ResetPasswordHandler(user.UserID)">
                                <img src="images/password-reset-30x30.png" width="30" height="30" />
                            </MudButton>
                        </div>
                    </td>
                    <td>
                        <div class="flex justify-center">
                            <MudIconButton Icon="@Icons.Material.Edit"
                                           @onclick="() => EditUserHandler(user.UserID)"
                                           Color="Color.Primary">
                            </MudIconButton>
                        </div>
                    </td>
                    <td>
                        <div class="flex justify-center">
                            <MudIconButton Icon="@Icons.Material.Delete"
                                           @onclick="() => DeleteUserHandler(user.UserID)"
                                           Color="Color.Error">
                            </MudIconButton>
                        </div>
                    </td>
                </tr>
            }
        </tbody>

    </MudSimpleTable>
}
else if (users?.Response?.Count == 0)
{
    <p>No application users found</p>
}

@code {
    private PaginatedResponse<List<UserModel>> users = new PaginatedResponse<List<UserModel>>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var pagination = new PaginationModel { Page = 1, RecordsPerPage = 50 };
        users = await userRepository.GetUsers(pagination);

        // await Task.Delay(3000);
        isLoading = false;
    }

    private void EditUserHandler(string userId)
    {
        navigationManager.NavigateTo($"/editUser/{userId}");
    }

    private async Task DeleteUserHandler(string userId)
    {
        if (await ShowConfirmDeleteDialog())
        {
            await userRepository.DeleteUser(userId);
            var userToDelete = users.Response.FirstOrDefault(x => x.UserID.Equals(userId));
            users.Response.Remove(userToDelete);
            StateHasChanged();
            ShowDeleteSuccessSnackbar();
        }
    }

    private async Task<bool> ShowConfirmDeleteDialog()
    {
        var Options = new MudBlazor.Dialog.DialogOptions() { CloseButton = true };
        var Parameters = new DialogParameters();
        Parameters.Add("Message", "Are you sure you want to delete this user?");
        var userSelect = Dialog.Show<ConfirmDeleteDialog>("Confirm Delete", Parameters, Options);
        var result = await userSelect.Result;

        if (result.Cancelled)
        {
            return false;
        }
        return true;
    }

    private async Task ResetPasswordHandler(string userId)
    {
        await jsRuntime.ConsoleLog("user id: " + userId);
        navigationManager.NavigateTo($"/resetPassword/{userId}");
    }

    private void ShowDeleteSuccessSnackbar()
    {
        Toaster.Add("User successfully deleted.", MatToastType.Success, "", "", config =>
        {
            config.ShowProgressBar = false;
            config.RequireInteraction = false;
        });
    }
}
