
@using LCMClient.Features.Guardians.Models
@using LCMClient.Features.Shared.Repository.Contracts
@using MatBlazor;
@using LCMClient.Features.Shared

@inject NavigationManager navigationManager
@inject IGuardianRepository guardianRepository
@inject IMatToaster toaster

@attribute [Authorize]


<TabContentHeader HeaderText="Edit"
                  ShowButton="false">
    <div class="text-white mt-1">
        <MudIcon Icon="@Icons.Material.Edit" Size="Size.Medium"></MudIcon>
    </div>
</TabContentHeader>



@if(guardianToEdit is not null)
{
    <div class="mt-8 mb-8 ml-32 mr-32">
        <EditForm Model="@guardianToEdit" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <!-- First Name -->
            <div class="w-full px-3 mb-6">
                <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="firstName">
                    First Name
                </label>
                <InputText id="firstName" class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                           @bind-Value="guardianToEdit.FirstName" />
                <ValidationMessage For="@(() => guardianToEdit.FirstName)" />
            </div>

            <!-- Last Name -->
            <div class="w-full px-3 mb-6">
                <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="lastName">
                    Last Name
                </label>
                <InputText id="lastName" class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                           @bind-Value="guardianToEdit.LastName" />
                <ValidationMessage For="@(() => guardianToEdit.LastName)" />
            </div>

            <!-- Location -->
            <div class="w-full px-3 mb-6">
                <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="location">
                    Location
                </label>
                <InputText id="middleName" class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                           @bind-Value="guardianToEdit.Location" />
                <ValidationMessage For="@(() => guardianToEdit.Location)" />
            </div>

            <ValidationSummary />

            <div class="d-flex justify-center">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           StartIcon="@Icons.Material.Save"
                           ButtonType="ButtonType.Submit">
                    Save
                </MudButton>
            </div>
        </EditForm>
    </div>


}
else
{
    <LoadingAnimation />
}


@code {

    [Parameter]
    public GuardianDetailsModel GuardianDetails { get; set; }

    [Parameter]
    public EventCallback HandleGuardianEdited { get; set; }

    private GuardianEditModel guardianToEdit;

    protected override void OnParametersSet()
    {
        // Map GuardianDetails obj to new instance of GuardianEditModel
        if (GuardianDetails is null) return;
        guardianToEdit = new GuardianEditModel
        {
            GuardianID = GuardianDetails.GuardianID,
            FirstName = GuardianDetails.FirstName,
            LastName = GuardianDetails.LastName,
            Location = GuardianDetails.Location
        };
    }

    private async Task HandleValidSubmit()
    {
        await guardianRepository.UpdateGuardianAsync(guardianToEdit.GuardianID, guardianToEdit);
        await HandleGuardianEdited.InvokeAsync();
        toaster.Add("Guardian updated.", MatToastType.Success);
    }
}
