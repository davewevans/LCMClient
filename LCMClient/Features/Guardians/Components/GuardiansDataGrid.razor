@using LCMClient.Features.Shared.Models
@using LCMClient.Services 

@inject IHttpService httpService
@inject NavigationManager navigationManager

@if(readyForGrid)
{
<SfGrid @ref="GuardianDataGrid"
        TValue="GuardianModel"
        AllowPaging="true"
        AllowSorting="true"
        AllowFiltering="false"
        Query="@Qry"
        Toolbar="@ToolbarItems"
        AllowSelection="true"
        AllowReordering="true"
        AllowResizing="true"
        AllowTextWrap="true"
        AllowExcelExport="true"
        AllowPdfExport="true">

    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>

    <GridPageSettings PageSize="@pageSize"
                      PageSizes="@PageSizes">
    </GridPageSettings>

    <GridSelectionSettings EnableToggle="true" EnableSimpleMultiRowSelection="false"></GridSelectionSettings>

    <GridEvents TValue="GuardianModel"
                OnLoad="Load"
                OnToolbarClick="ToolbarClick"
                OnRecordClick="RecordClickHandler"
                OnActionBegin="ActionBeginHandler">
    </GridEvents>

    <SfDataManager Url="@apiUrl"
                   CrossDomain="true"
                   Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>

    <GridEditSettings AllowAdding="false"
                      AllowEditing="false"
                      AllowDeleting="false"
                      Mode="EditMode.Normal"
                      AllowEditOnDblClick="false"
                      ShowDeleteConfirmDialog="false">
    </GridEditSettings>

    <GridColumns>
        <GridColumn Field="@nameof(GuardianModel.GuardianID)" IsPrimaryKey="true" AllowEditing="false" Visible="false" />

        <GridColumn Field="@nameof(GuardianModel.FirstName)"
                    HeaderText="First Name"
                    Width="120"
                    ValidationRules="@(new ValidationRules {Required = true, MaxLength = 255})" />
        <GridColumn Field="@nameof(GuardianModel.LastName)"
                    HeaderText="Last Name"
                    Width="120"
                    ValidationRules="@(new ValidationRules {MaxLength = 255})" />
        <GridColumn Field="@nameof(GuardianModel.Location)"
                    HeaderText="Location"
                    Width="120"
                    ValidationRules="@(new ValidationRules {MaxLength = 255})" />
        <GridColumn Field="@nameof(GuardianModel.NumberOfDependents)"
                    HeaderText="Dependents"
                    Width="60"
                    ValidationRules="@(new ValidationRules {MaxLength = 255})" />

        <GridColumn HeaderText="" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="80" AllowEditing="false">
            <Template>
                @{
                    var _guardian = (context as GuardianModel);
                    <SfButton Content="@ProfileBtnContent" CssClass="e-link" @onclick="@(() => NavigateToDetails(_guardian.GuardianID))"> </SfButton>
                }
            </Template>
        </GridColumn>

    </GridColumns>
</SfGrid>
}
else
{
    <p>Loading...</p>
}


@code {

    private bool readyForGrid = false;

    private string apiUrl = "";

    private SfGrid<GuardianModel> GuardianDataGrid = new SfGrid<GuardianModel>();

    public static string searchTerm = "";
    public Query Qry = new Query();
    private string ProfileBtnContent = "View/Edit";

    public List<GuardianModel> Guardians { get; set; }

    public List<string> ToolbarItems = new List<string> { "ExcelExport", "PdfExport", "Search" };

    public int[] PageSizes = { 5, 10, 20, 50, 100 };
    private int pageSize = 20;

    protected override void OnInitialized()
    {
        readyForGrid = false;
        apiUrl = $"{ httpService.BaseUrl }guardians/guardiansSFDataGrid";
        readyForGrid = true;
    }

    public async Task ActionBeginHandler(ActionEventArgs<GuardianModel> args)
    {
        // Add to query string parameters for search and sorting
        if (string.IsNullOrWhiteSpace(args.SearchString)) await GuardianDataGrid.Search("");
        Qry.AddParams("SearchTerm", args.SearchString);

        if (!string.IsNullOrWhiteSpace(args.ColumnName))
            Qry.AddParams("ColumnName", args.ColumnName);

        Qry.AddParams("SortDirection", args.Direction);
    }

    public async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("excelexport"))
        {
            await this.GuardianDataGrid.ExcelExport();
        }

        if (args.Item.Id.Contains("pdfexport"))
        {
            await this.GuardianDataGrid.PdfExport();
        }
    }

    private void NavigateToDetails(int id)
    {
        navigationManager.NavigateTo($"/GuardianDetails/{ id }");
    }

    public void RecordClickHandler(RecordClickEventArgs<GuardianModel> args)
    {
        navigationManager.NavigateTo($"/GuardianDetails/{ args.RowData.GuardianID }");
    }

    public void Load(object args)
    {

    }
}