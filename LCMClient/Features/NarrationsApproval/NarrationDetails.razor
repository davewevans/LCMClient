@page "/NarrationApprovalDetails/{narrationId:int}"


@using LCMClient.Features.Auth
@using LCMClient.Features.Shared
@using LCMClient.Helpers
@using LCMClient.Features.Shared.Repository.Contracts
@using LCMClient.Features.Shared.Models
@using LCMClient.Features.Admin.Models
@using LCMClient.Features.Shared.Narrations

@inject IAccountsRepository accountsRepository
@inject INarrationRepository narrationRepository

@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IJSRuntime jsRuntime
@inject IDialogService Dialog
@inject IMatToaster Toaster

@attribute [Authorize(Roles = "Admin, NarrationApprover")]

<div class="mb-16 m-8">
    <EditForm Model="narrationDetails">
        <DataAnnotationsValidator/>

        <MudCard Class="my-mud-card-form pb-8">
            <MudCardHeader Class="my-mud-card-header">
                <CardHeaderContent>
                    <MudText Typo="Typo.h3">Narration Details</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Cancel" Color="Color.Default" OnClick="@OnCancel"/>
                </CardHeaderActions>
            </MudCardHeader>

            <MudCardContent>

                @if (narrationDetails != null)
                {
                    <div class="text-lg mb-4">
                        <span class="font-semibold">Submitted On</span> @narrationDetails.SubmittedAt?.ToShortDateString()
                    </div>


                    <div class="text-lg mb-4">
                        <span class="font-semibold">Submitted By</span> @narrationDetails.SubmittedByName
                    </div>

                    if (narrationDetails.OrphanID != null)
                    {
                        <div class="text-lg mb-4">
                            <span class="font-semibold">Orphan Name</span> @narrationDetails.OrphanName
                        </div>
                    }

                    if (narrationDetails.GuardianID != null)
                    {
                        <div class="text-lg mb-4">
                            <span class="font-semibold">Guardian Name</span> @narrationDetails.GuardianName
                        </div>
                    }

                    <div class="text-lg mb-4">
                        <span class="font-semibold">Subject</span> @narrationDetails.Subject
                    </div>

                    <div class="flex flex-column mb-6">
                        <span class="font-semibold text-lg">Narration</span> 
                        <span>@narrationDetails.Note</span>
                    </div>

                    <div class="w-11/12 h-full px-3 my-8">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="comments">
                            Approver Comments
                        </label>
                        <InputTextArea id="comments" class="appearance-none block w-full h-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                       @bind-Value="narrationDetails.Comments"/>
                        <ValidationMessage For="@(() => narrationDetails.Comments)"/>
                    </div>
                }

            </MudCardContent>

            <MudCardActions>
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.ThumbUpAlt"
                           ButtonType="ButtonType.Submit"
                           Size="Size.Large"
                           Color="Color.Primary"
                           Style="margin-left:auto;margin-right:auto;"
                           @onclick="() => ApproveNarrationHandler(narrationDetails.NarrationID)"
                           Class="mt-6">
                    Approve
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.ThumbDownAlt"
                           ButtonType="ButtonType.Submit"
                           Size="Size.Large"
                           Color="Color.Error"
                           Style="margin-left:auto;margin-right:auto;"
                           @onclick="() => RejectNarrationHandler(narrationDetails.NarrationID)"
                           Class="mt-6">
                    Reject
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>


@code {

    [Parameter]
    public int narrationId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private NarrationModel narrationDetails = new();

    protected override async Task OnInitializedAsync()
    {
        narrationDetails = await narrationRepository.GetNarrationById(narrationId);

        await jsRuntime.ConsoleLog($"submitted by: {narrationDetails.SubmittedByName}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.FocusInput("comments");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private async Task ApproveNarrationHandler(int narrationId)
    {
    //await jsRuntime.ConsoleLog($"ApproveNarrationHandler");
    //await jsRuntime.ConsoleLog($"narration id: {narrationId}");

    // get user email to send to API
        var authState = await AuthState;
        var user = authState.User;
        string userEmail = "";
        string emailClaimTypeKey = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress";
        foreach (var claim in authState.User.Claims)
        {
            await jsRuntime.ConsoleLog(claim.Type + " : " + claim.Value);
            if (claim.Type.Equals(emailClaimTypeKey))
            {
                userEmail = claim.Value;
            }
        }

        narrationDetails.ApprovedByEmail = userEmail;


        var result = await narrationRepository.ApproveNarrationAsync(narrationId, narrationDetails);
        if (result)
        {
            ShowSnackbar("Narration has been approved.", MatToastType.Success);
            navigationManager.NavigateTo("/pendingnarrations");
            return;
        }
        ShowSnackbar("Narration approval failed.", MatToastType.Danger);
    }

    private async Task RejectNarrationHandler(int narrationId)
    {
    //await jsRuntime.ConsoleLog($"RejectNarrationHandler");
    //await jsRuntime.ConsoleLog($"narration id: {narrationId}");

    // get user email to send to API
        var authState = await AuthState;
        var user = authState.User;
        string userEmail = "";
        string emailClaimTypeKey = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress";
        foreach (var claim in authState.User.Claims)
        {
            await jsRuntime.ConsoleLog(claim.Type + " : " + claim.Value);
            if (claim.Type.Equals(emailClaimTypeKey))
            {
                userEmail = claim.Value;
            }
        }

        narrationDetails.RejectedByEmail = userEmail;


        var result = await narrationRepository.RejectNarrationAsync(narrationId, narrationDetails);
        if (result)
        {
            ShowSnackbar("Narration has been rejected.", MatToastType.Success);
            navigationManager.NavigateTo("/pendingnarrations");
            return;
        }
        ShowSnackbar("Narration rejected failed.", MatToastType.Danger);
    }

    // private async Task OnRejectNarrationHandler(int narrationId)
    // {
    //     await jsRuntime.ConsoleLog($"OnRejectNarrationHandler");
    //     await jsRuntime.ConsoleLog($"narration id: {narrationId}");
    //     
    //     if (await ShowConfirmDeleteDialog())
    //     {
    //         await narrationRepository.DeleteNarrationAsync(narrationId);
    //         ShowDeleteSuccessSnackbar();
    //         navigationManager.NavigateTo("/pendingnarrations");
    //     }
    // }

    private void ShowSnackbar(string message, MatToastType type)
    {
        Toaster.Add(message, type, "", "", config =>
        {
            config.ShowProgressBar = false;
            config.RequireInteraction = false;
        });
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("/pendingnarrations");
    }


    private async Task<bool> ShowConfirmDeleteDialog()
    {
        var Options = new MudBlazor.Dialog.DialogOptions() {CloseButton = true};
        var Parameters = new DialogParameters();
        Parameters.Add("Message", "Are you sure you want to reject this narration?");
        var userSelect = Dialog.Show<ConfirmDeleteDialog>("Confirm Delete", Parameters, Options);
        var result = await userSelect.Result;

        if (result.Cancelled)
        {
            return false;
        }
        return true;
    }

    private void ShowDeleteSuccessSnackbar()
    {
        Toaster.Add("Narration successfully rejected.", MatToastType.Success, "", "", config =>
        {
            config.ShowProgressBar = false;
            config.RequireInteraction = false;
        });
    }

}