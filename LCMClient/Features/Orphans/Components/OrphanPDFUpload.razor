@using System.IO;
@using Tewr.Blazor.FileReader
@using LCMClient.Features.Orphans.Models
@using LCMClient.Features.Orphans.Repository.Contracts
@using Syncfusion.Blazor.ProgressBar

@inject IFileReaderService FileReader
@inject IPDFRepository PdfRepository
@inject IMatToaster toaster

<div class="border border-dashed border-gray-500 relative">
    <input type="file"
           @ref="inputReference"
           @onchange="@HandleFileUpload"
           class="cursor-pointer relative block opacity-0 w-full h-full p-20 z-50">
    <div class="text-center p-10 absolute top-0 right-0 left-0 m-auto">
        <h4>
            Drop an PDF file in this box to upload
            <br />or
        </h4>
        <p class="text-xl">Click to Select a PDF</p>
    </div>
</div>


@if (progress < 100)
{
    <SfProgressBar Value="@progress" Minimum="0" Maximum="100" TrackThickness="12" ProgressThickness="12">
    </SfProgressBar>
}
else
{
    <p class="@statusClass">@status</p>
}


@if (uploadFailed)
{
    <p class="@statusClass">@status</p>
}


@code {

    [Parameter]
    public OrphanDetailsModel Orphan { get; set; }

    [Parameter]
    public int? SponsorID { get; set; }

    [Parameter]
    public bool AllSponsors { get; set; }

    [Parameter]
    public EventCallback<OrphanDetailsModel> HandlePostUpload { get; set; }

    string status = "";
    string statusClass = "";
    bool uploadFailed = false;
    int maxFileSizeMb = 50 * 1024 * 1024;
    private double progress = 0;
    private string progressWidth => $"{progress}%";

    readonly string[] allowedContentTypes = { "application/pdf", "application/x-pdf" };

    ElementReference inputReference;

    private async Task HandleFileUpload()
    {
        progress = 0;
        int countSize = 0;
        uploadFailed = false;
        status = "";

        // Read the file
        var file = (await FileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file != null)
        {
            var fileInfo = await file.ReadFileInfoAsync();

            if (!IsValidFile(fileInfo.Type, fileInfo.Size)) return;

            byte[] fileBytes;
            await using (var ms = new MemoryStream())
            {
                await using (var fs = await file.OpenReadAsync())
                {
                    var bufferSize = 4096;
                    var buffer = new byte[bufferSize];
                    int count;
                    while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
                    {
                        ms.Write(buffer, 0, count);
                        countSize += count;
                        progress = (((double)countSize / fileInfo.Size) * 97);
                        StateHasChanged();
                    }

                    fileBytes = ms.ToArray();
                }
            }


            if (SponsorID is null && !AllSponsors)
            {
                status = "No sponsor selected.";
                statusClass = "text-red-600 text-2xl";
                return;
            }


            var pdfCreation = new PDFCreationModel
            {
                FileName = fileInfo.Name,
                ContentType = fileInfo.Type,
                OrphanID = Orphan.OrphanID,
                AllSponsors = AllSponsors,
                OriginalFileName = fileInfo.Name,
                SponsorID = SponsorID == 0 ? null : SponsorID
            };


            bool result = await PdfRepository.UploadPDFAsync(pdfCreation, fileBytes);

            await HandlePostUpload.InvokeAsync(Orphan);
            ShowResult(result);

        }
    }

    private void ShowResult(bool isSuccess)
    {
        if (isSuccess)
        {
            progress = 100;
            status = "Upload Success!";
            statusClass = "text-green-600 text-2xl";
            toaster.Add("Successfully uploaded!.", MatToastType.Success);
        }
        else
        {
            status = "Something went wrong :(";
            statusClass = "text-red-600 text-2xl";
            uploadFailed = true;
            toaster.Add("Upload failed.", MatToastType.Danger);
        }
    }

    private bool IsValidFile(string type, long size)
    {
        if (!allowedContentTypes.Contains(type))
        {
            uploadFailed = true;
            status = "Please select a .pdf file.";
            statusClass = "text-red-600 text-2xl";
            return false;
        }

        if (size > maxFileSizeMb)
        {
            uploadFailed = true;
            status = $"Max file size: {maxFileSizeMb}MB";
            statusClass = "text-red-600 text-2xl";
            return false;
        }

        return true;
    }
}