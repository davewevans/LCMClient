@using System.IO;
@using Tewr.Blazor.FileReader
@using LCMClient.Features.Orphans.Repository.Contracts
@using LCMClient.Features.Orphans.Models
@using Syncfusion.Blazor.ProgressBar

@inject IFileReaderService FileReader
@inject IPictureRepository PicRepository
@inject IMatToaster toaster

@if (!IsProfilePhoto)
{
<div class="flex items-center space-x-2 mr-10 ml-10 mb-8">
    <SfSwitch @bind-Checked="@uploadNewPic"></SfSwitch>
    <label class="uppercase tracking-wide text-gray-700 text-xs font-bold">Upload A New Photo</label>
</div>
}


@if (uploadNewPic || IsProfilePhoto)
{
    <div class="mr-16 ml-16">
        <EditForm Model="@picCreation">

            @if (!IsProfilePhoto)
            {
                <!-- TakenDate -->
                <div class="mb-8 w-64">
                    <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="takenDate">
                        Date Picture was Taken (optional)
                    </label>
                    <div class="w-48">
                        <InputDate id="takenDate" class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                   @bind-Value="picCreation.TakenDate" />
                        <ValidationMessage For="@(() => picCreation.TakenDate)" />
                    </div>

                </div>

                <!-- Caption -->
                <div class="mb-8">
                    <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="caption">
                        Caption (optional)
                    </label>
                    <InputText id="caption" class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                               @bind-Value="picCreation.Caption" />
                    <ValidationMessage For="@(() => picCreation.Caption)" />
                </div>
            }

            <!-- Upload picture zone -->
            <div class="border border-dashed border-gray-500 relative">
                <input type="file"
                       @ref="inputReference"
                       @onchange="@HandleFileUpload"
                       class="cursor-pointer relative block opacity-0 w-full h-full p-20 z-50">
                <div class="text-center p-10 absolute top-0 right-0 left-0 m-auto">
                    <h4>
                        Drop an image file in this box to upload
                        <br />or
                    </h4>
                    <p class="text-xl">Click to Select a Photo</p>
                </div>
            </div>

        </EditForm>

        @if (progress < 100)
        {
            <SfProgressBar Value="@progress" Minimum="0" Maximum="100" TrackThickness="12" ProgressThickness="12">
            </SfProgressBar>
        }
        else
        {
            <p class="@statusClass">@status</p>
        }


        @if (uploadFailed)
        {
            <p class="@statusClass">@status</p>
        }
    </div>
}


@code {

    [Parameter]
    public OrphanDetailsModel Orphan { get; set; }

    [Parameter]
    public bool IsProfilePhoto { get; set; }

    [Parameter]
    public EventCallback<OrphanDetailsModel> HandlePostUpload { get; set; }

    private PictureCreationModel picCreation = new PictureCreationModel();

    string status = "";
    string statusClass = "";
    bool uploadFailed = false;
    int maxFileSizeMb = 10 * 1024 * 1024;
    double progress = 0;
    bool uploadNewPic = false;

    readonly string[] allowedContentTypes = { "image/jpeg", "image/png", "image/gif" };

    ElementReference inputReference;

    private async Task HandleFileUpload()
    {
        int countSize = 0;
        uploadFailed = false;
        status = "";

        // Read the file
        var file = (await FileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file != null)
        {
            var fileInfo = await file.ReadFileInfoAsync();

            if (!IsValidFile(fileInfo.Type, fileInfo.Size)) return;

            byte[] fileBytes;
            await using (var ms = new MemoryStream())
            {
                await using (var fs = await file.OpenReadAsync())
                {
                    var bufferSize = 4096;
                    var buffer = new byte[bufferSize];
                    int count;
                    while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
                    {
                        ms.Write(buffer, 0, count);
                        countSize += count;
                        progress = (((double)countSize / fileInfo.Size) * 97);
                        StateHasChanged();
                    }

                    fileBytes = ms.ToArray();
                }
            }

            picCreation.IsProfilePic = IsProfilePhoto;
            picCreation.PictureFileName = fileInfo.Name;
            picCreation.ContentType = fileInfo.Type;
            picCreation.OrphanID = Orphan.OrphanID;


            string result = await PicRepository.UploadImageAsync(picCreation, fileBytes);

            if (!string.IsNullOrWhiteSpace(result) && IsProfilePhoto)
            {
                Orphan.ProfilePicUrl = result;
            }
            await HandlePostUpload.InvokeAsync(Orphan);
            ShowStatus(result);
        }
    }

    private void ShowStatus(string result)
    {
        if (string.IsNullOrWhiteSpace(result))
        {
            status = "Something went wrong :(";
            statusClass = "text-red-600 text-2xl";
            toaster.Add("Upload failed.", MatToastType.Danger);
            uploadFailed = true;
        }
        else
        {
            progress = 100;
            status = "Upload Success!";
            statusClass = "text-green-600 text-2xl";
            toaster.Add("Successfully uploaded!.", MatToastType.Success);
        }
    }

    private bool IsValidFile(string type, long size)
    {
        if (!allowedContentTypes.Contains(type))
        {
            uploadFailed = true;
            status = "Please select a .png, .jpg, or .gif file.";
            statusClass = "text-red-600 text-2xl";
            return false;
        }

        if (size > maxFileSizeMb)
        {
            uploadFailed = true;
            status = $"Max file size: {maxFileSizeMb}MB";
            statusClass = "text-red-600 text-2xl";
            return false;
        }

        return true;
    }
}