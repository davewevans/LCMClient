@using LCMClient.Features.Orphans.Repository.Contracts
@using LCMClient.Features.Orphans.Models

@inject IOrphanRepository orphanRepository
@inject NavigationManager navigationManager


<SfGrid @ref="OrphanDataGrid"
        TValue="OrphanModel"
        Toolbar="@ToolbarItems"
        AllowPaging="true"
        AllowSorting="true"
        AllowFiltering="false"
        Query="@Qry"
        AllowSelection="true"
        AllowReordering="true"
        AllowResizing="true"
        AllowTextWrap="true"
        AllowExcelExport="true"
        AllowPdfExport="true">

    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>

    <GridPageSettings PageSize="@pageSize"
                      PageSizes="@PageSizes">
    </GridPageSettings>

    <GridSelectionSettings EnableToggle="true" EnableSimpleMultiRowSelection="false"></GridSelectionSettings>

    <GridEvents TValue="OrphanModel"
                OnLoad="Load"
                OnToolbarClick="ToolbarClick"
                OnRecordClick="RecordClickHandler"
                OnActionBegin="ActionBeginHandler">
    </GridEvents>

    @if (false)
    {
        @* ref: 
            https://blazor.syncfusion.com/documentation/data/how-to/offline-mode/
            https://blazor.syncfusion.com/documentation/datagrid/how-to/change-datasource-dynamically/
            
            
            *@
        @*<SfDataManager Adaptor="Adaptors.CustomAdaptor" Offline="true">
            <OrphanDataAdaptor></OrphanDataAdaptor>
        </SfDataManager>*@
    }
    else
    {
        <SfDataManager Url="https://localhost:44352/api/orphans/orphansSFDataGrid"
                       CrossDomain="true"
                       Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
    }

    <GridEditSettings AllowAdding="false"
                      AllowEditing="false"
                      AllowDeleting="false"
                      Mode="EditMode.Normal"
                      AllowEditOnDblClick="false"
                      ShowDeleteConfirmDialog="false">
    </GridEditSettings>

    <GridColumns>
        <GridColumn Field="@nameof(OrphanModel.OrphanID)" IsPrimaryKey="true" AllowEditing="false" Visible="false" />

        <GridColumn Width="50" AllowEditing="false">
            <Template>
                @{
                    var _orphan = (context as OrphanModel);
                    <img src="@_orphan?.ProfilePicUrl"
                         class="rounded-full" style="max-height:100px;"
                         alt="@_orphan?.FullName" />
                }
            </Template>
        </GridColumn>

        <GridColumn Field="@nameof(OrphanModel.FirstName)"
                    HeaderText="First Name"
                    Width="80"
                    ValidationRules="@(new ValidationRules{ Required=true, MaxLength=255 })" />
        <GridColumn Field="@nameof(OrphanModel.MiddleName)"
                    HeaderText="Middle Name"
                    Width="80"
                    HideAtMedia="(min-width: 480px)"
                    ValidationRules="@(new ValidationRules{ MaxLength=255 })" />
        <GridColumn Field="@nameof(OrphanModel.LastName)"
                    HeaderText="Last Name"
                    Width="80"
                    ValidationRules="@(new ValidationRules{ MaxLength=255 })" />

        <GridColumn Field="@nameof(OrphanModel.Gender)"
                    HeaderText="Gender"
                    Width="60"
                    HideAtMedia="(min-width: 480px)"
                    EditType="EditType.DropDownEdit" DataSource="@GenderOptions">
            <EditTemplate>
                @{
                    var _orphan = (context as OrphanModel);
                    <SfComboBox TValue="string" TItem="GenderOption" @bind-Value="@_orphan.Gender" Placeholder="Select Gender" DataSource="@GenderOptions">
                        <ComboBoxFieldSettings Value="ID" Text="Text"></ComboBoxFieldSettings>
                    </SfComboBox>
                }
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(OrphanModel.DateOfBirth)"
                    HeaderText="DOB" Format="d" Width="60" Type="ColumnType.Date"
                    HideAtMedia="(min-width: 480px)" />
        <GridColumn HeaderText="Status"
                    Width="60"
                    Field="@nameof(OrphanModel.LCMStatus)"
                    HideAtMedia="(min-width: 768px)">
            <Template>
                @{
                    var _orphan = (context as OrphanModel);
                    if (_orphan?.LCMStatus != null && _orphan.LCMStatus.ToLower().StartsWith("active"))
                    {
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">@_orphan?.LCMStatus</span>
                    }
                    else
                    {
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">@_orphan?.LCMStatus</span>
                    }
                }
            </Template>
            <EditTemplate>
                @{
                    var _orphan = (context as OrphanModel);
                    <SfComboBox TValue="string" TItem="StatusOption" @bind-Value="@_orphan.LCMStatus" Placeholder="Select Status" DataSource="@StatusOptions">
                        <ComboBoxFieldSettings Value="ID" Text="Text"></ComboBoxFieldSettings>
                    </SfComboBox>
                }
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(OrphanModel.ProfileNumber)"
                    HeaderText="Profile #"
                    Width="60"
                    HideAtMedia="(min-width: 768px)"
                    ValidationRules="@(new ValidationRules{ MaxLength=30 })" />

        <GridColumn HeaderText="" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center" Width="80" AllowEditing="false">
            <Template>
                @{
                    var _orphan = (context as OrphanModel);
                    <SfButton Content="@ProfileBtnContent" CssClass="e-link" @onclick="@(() => NavigateToDetails(_orphan.OrphanID))"> </SfButton>

                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>




<style>
    .badge {
        font-size: 14px;
    }

    .e-grid .e-gridcontent .e-rowcell.test {
        color: green;
    }
    .excel-icon:before {
        content: '\e74e';
    }
    .pdf-icon:before {
        content: '\e727';
    }    
</style>


@code {

    private SfGrid<OrphanModel> OrphanDataGrid = new SfGrid<OrphanModel>();

    public static string searchTerm = "";

    public Query Qry = new Query();

    public List<object> ToolbarItems = new List<object> { "ExcelExport", "PdfExport", "Search" };

    private int pageSize = 20;

    private int[] PageSizes = { 5, 10, 20, 50, 100 };

    private string ProfileBtnContent = "View/Edit";

    private void NavigateToDetails(int id)
    {
        navigationManager.NavigateTo($"/orphandetails/{ id }");
    }

    public class StatusOption
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }

    List<StatusOption> StatusOptions = new List<StatusOption>
    {
        new StatusOption() { ID="Active", Text="Active"},
        new StatusOption() { ID="Inactive", Text="Inactive"},
    };


    public class GenderOption
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }

    List<GenderOption> GenderOptions = new List<GenderOption>
    {
        new GenderOption() { ID="Male", Text="Male"},
        new GenderOption() { ID="Female", Text="Female"},
    };

    public async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("excelexport"))
        {
            await this.OrphanDataGrid.ExcelExport();
        }

        if (args.Item.Id.Contains("pdfexport"))
        {
            await this.OrphanDataGrid.PdfExport();
        }
    }

    public async Task ActionBeginHandler(ActionEventArgs<OrphanModel> args)
    {
        // Add to query string parameters for search and sorting
        if (string.IsNullOrWhiteSpace(args.SearchString)) await OrphanDataGrid.Search("");
        Qry.AddParams("SearchTerm", args.SearchString);

        if (!string.IsNullOrWhiteSpace(args.ColumnName))
            Qry.AddParams("ColumnName", args.ColumnName);

        Qry.AddParams("SortDirection", args.Direction);
    }

    public void RecordClickHandler(RecordClickEventArgs<OrphanModel> args)
    {
        // nav to details view 
        NavigateToDetails(args.RowData.OrphanID);
    }

    public void Load(object args)
    {

    }
}


