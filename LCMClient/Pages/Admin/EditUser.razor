@page "/editUser/{userId}"

@using LCMClient.Auth
@using LCMClient.DTOs
@using LCMClient.Helpers

@inject IAccountsRepository accountsRepository
@inject IUserRepository userRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IJSRuntime jsRuntime
@attribute [Authorize(Roles = "Admin")]

<div class="mb-16">
    <EditForm Model="userInfo" OnValidSubmit="EditUserHandler">
        <DataAnnotationsValidator />


        <MudCard Class="my-mud-card-form">
            <MudCardHeader Style="background-color:lightskyblue;">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Edit User</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Cancel" Color="Color.Default" OnClick="@OnCancel" />
                </CardHeaderActions>
            </MudCardHeader>

            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.FirstName" Label="First Name" Variant="Variant.Text" />
                        <ValidationMessage For="@(() => userInfo.FirstName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.LastName" Label="Last Name" Variant="Variant.Text" />
                        <ValidationMessage For="@(() => userInfo.LastName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="userInfo.Email" Label="Email" Variant="Variant.Text" />
                        <ValidationMessage For="@(() => userInfo.Email)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect T="string" Label="Assign Role" @bind-Value="@userInfo.Role">
                            
                                @foreach (var role in roles)
                                {
                                    <MudSelectItem Value="@role">@role</MudSelectItem>
                                }
                          
                        </MudSelect>
                        <ValidationMessage For="@(() => userInfo.Role)" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>


            <MudCardActions>
                <MudButton Variant="Variant.Filled"
                           ButtonType="ButtonType.Submit"
                           Size="Size.Large"
                           Color="Color.Primary"
                           Style="margin-left:auto;margin-right:auto;"
                           Class="mt-6">
                    Edit User
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {
    [Parameter] public string UserId { get; set; }

    private UserEdit userInfo = new UserEdit();
    private UserDTO user = new UserDTO();
    private List<string> roles = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        user = await userRepository.GetUserById(UserId);

        userInfo.FirstName = user.FirstName;
        userInfo.LastName = user.LastName;
        userInfo.Email = user.Email;
        userInfo.Role = user.Role;

        var payload = await userRepository.GetRoles();
        this.roles = payload.Select(x => x.RoleName).ToList();
    }

    private async Task EditUserHandler()
    {
        await userRepository.EditUser(UserId, userInfo);
        navigationManager.NavigateTo("/admin");
    }

    private void OnCancel()
    {
        navigationManager.NavigateTo("/admin");
    }
}
