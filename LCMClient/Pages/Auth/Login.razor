@page "/login"

@inject IAccountsRepository accountsRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService

@using LCMClient.Auth

<h3 class="font-semibold text-2xl">Login</h3>
<br />

@if (loginFailed)
{
    <h2 class="text-red-600">@responseMessage</h2>
}
<br />

<EditForm Model="userInfo" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label class="font-semibold">Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="@userInfo.Email" />
            <ValidationMessage For="@(() => userInfo.Email)" />
        </div>
    </div>

    <div class="form-group">
        <label class="font-semibold">Password:</label>
        <div>
            <InputPassword class="form-control" @bind-Value="@userInfo.Password" />
            <ValidationMessage For="@(() => userInfo.Password)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

</EditForm>

@code {
    private UserInfo userInfo = new UserInfo();

    private bool loginFailed = false;
    private string responseMessage = "";

    private async Task LoginUser()
    {
        //
        // TODO loading animation
        //

        loginFailed = false;
        responseMessage = "";

        try
        {
            var response = await accountsRepository.Login(userInfo);

            if (!response.IsSuccessful)
            {
                loginFailed = true;
                responseMessage = response.ResponseMessage;
                return;
            }

            await loginService.Login(response.Token);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            responseMessage = "Something went wrong. Please try again.";
            // TODO log err
        }

    }
}
